//-----------------------Including library------------------------------//

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include<Ticker.h>


//--------------------ISR for implementing watchdog-------------------//
Ticker secondTick;
volatile int watchdogCount=0;
void ISRwatchdog(){


  watchdogCount++;
  if(watchdogCount==60){


    Serial.println();
    Serial.print("The watch dog bites......");
    //ESP.reset();
    ESP.restart();
  }
}


//-----------------Defining required pins---------------------------//

#define lockPin 13             // NODE MCU PIN D7
#define acPin 5                // NODE MCU PIN D1
#define lightPin 4                     // NODE MCU PIN D2
#define pirPin 14              // NODE MCU PIN D5
#define ledPin 12              // NODE MCU PIN D6
#define lightPin2 0            //NODE MCU PIN D3
#define lightPin3 2            //NODE MCU PIN D4




//-------------------Defining required variables---------------------//
long ledonTime = 0;
String lightStatus="0";
String ledStatus="0";
String lockStatus="0";
String acStatus="0";
String Status="";

char msg[6];
 
int pirValue=0;

//-------------------------------WiFi Credentials--------------------//


const char* ssid = "DataSoft_WiFi";
const char* password = "support123";
//const char* mqtt_server = "broker.mqtt-dashboard.com";
const char* mqtt_server = "182.48.84.180";

WiFiClient espClient;
PubSubClient client(espClient);

//------------------------setup-------------------//
void setup() {
  // put your setup code here, to run once:

Serial.begin(115200);
secondTick.attach(1,ISRwatchdog);

pinMode(lockPin,OUTPUT);
pinMode(acPin,OUTPUT);
pinMode(lightPin,OUTPUT);
pinMode(lightPin2,OUTPUT);
pinMode(lightPin3,OUTPUT);
pinMode(ledPin,OUTPUT);
pinMode(pirPin,INPUT);


digitalWrite(lockPin,LOW);
digitalWrite(acPin,HIGH);
digitalWrite(lightPin,HIGH);
digitalWrite(lightPin2,HIGH);
digitalWrite(lightPin3,HIGH);
digitalWrite(ledPin,HIGH);


  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

}


//-------------------------loop-------------------//

void loop() 
{

  watchdogCount=0;

 if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
 //---------------------Updating device status---------------------------------------------//

    
    Status="";
    Status=Status+lockStatus+acStatus+lightStatus;
    Status.toCharArray(msg,6);
    //Serial.print("Device Status:");
    //Serial.println(Status);
    delay(250);
  
  
  
  
  
  
  pirValue=digitalRead(pirPin);
  delay(100);
  Serial.print("pirValue:");
  Serial.println(pirValue);
  Serial.print("lightStatus:");
  Serial.println(lightStatus);
      
  if(pirValue== HIGH && lightStatus=="0")
  {

    digitalWrite(ledPin,LOW);
    ledStatus="1";
    Serial.println("led On");
  
  }
  /*if(pirValue==HIGH && lightStatus=="1")
  {
    digitalWrite(ledPin,LOW);
    Serial.println("led off");
    ledStatus='0';

    
  }*/
  if(ledStatus=="1")
  {
  
    long now=millis();
    if(now-ledonTime>60000){

        ledonTime=now;
        digitalWrite(ledPin,HIGH);
        ledStatus="0";
  }
  
}}


//------------------setup_wifi---------------------//

void setup_wifi() {
   delay(100);
  // We start by connecting to a WiFi network
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


//----------------------reconnect()--------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any

     //----------------------Subscribing to required topics-----------------------//

     
      client.subscribe("apartment/user_input");
      Serial.println("Subsribed to topic: apartment/user_input");
      client.subscribe("apartment/login");
      Serial.println("Subsribed to topic: apartment/login");
      
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()


//---------------------------Callback funtion-------------------------------------//

void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  
//------------------------user_input for manual load control-----------------//


  if(strcmp(topic, "apartment/user_input") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    
  
    if (data=='0')
    {
      digitalWrite(lockPin,LOW);//UNLOCkeD
      Serial.println("Door unlocked");
      lockStatus="0";
      }
      if (data=='1')
    {
      digitalWrite(lockPin,HIGH);//Locked
      Serial.println("Door locked");
      lockStatus="1";
      }
      if (data=='2')
    {
      digitalWrite(acPin,HIGH);//AC off
      Serial.println("AC Off");
      acStatus="0";
      
      }
      if (data=='3')
    {
      digitalWrite(acPin,LOW);//ac on
      Serial.println("AC ON");
      acStatus="1";
      }
      if (data=='4')
    {
      digitalWrite(lightPin,HIGH);//LIGHT OFF
      digitalWrite(lightPin2,HIGH);
      digitalWrite(lightPin3,HIGH);
      digitalWrite(ledPin,LOW);
      Serial.println("Light OFF");
      Serial.println("LED ON");
      
      lightStatus="0";
      ledStatus="1";
      Serial.print("lightStatus:");
      Serial.println(lightStatus);
      Serial.print("ledStatus:");
      Serial.println(ledStatus);

      
      }
      if (data=='5')
    {
      digitalWrite(lightPin,LOW);//LIGHT ON
      digitalWrite(lightPin2,LOW);
      digitalWrite(lightPin3,LOW);
      Serial.print("Light ON");
      digitalWrite(ledPin,HIGH);
      Serial.println("LED OFF");
      lightStatus="1";
      ledStatus="0";
      Serial.print("lightStatus:");
      Serial.println(lightStatus);
      Serial.print("ledStatus:");
      Serial.println(ledStatus);


      
      }
       
  }}


  if(strcmp(topic, "apartment/login") == 0){
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data2=payload[i];
    
  
    if (data2=='1')
    {

      client.publish("apartment/status",msg);
      Serial.print("Published Status:");
      Serial.println(msg);
    }
            
      }

  }
}
