//-----------------------Including library------------------------------//

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include<Ticker.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>        // https://github.com/tzapu/WiFiManager

int Version=1;
int pirValue1,pirValue2,sonarValue;
_Bool flag=true;


//--------------------ISR for implementing watchdog-------------------//


Ticker secondTick;
volatile int watchdogCount=0;
void ISRwatchdog(){


  watchdogCount++;
  if(watchdogCount==200){


    Serial.println();
    Serial.print("The watch dog bites......");
    //ESP.reset();
    ESP.restart();
  }
}


//-----------------Defining required pins---------------------------//

#define pirPin1 14             // NODE MCU PIN D5
#define pirPin2 12             // NODE MCU PIN D6
#define sonarPin 15            //NODE MCU PIN D8


//-------------------------------WiFi Credentials--------------------//

/*
const char* ssid = "DataSoft_WiFi";
const char* password = "support123";
const char* mqtt_server = "broker.mqtt-dashboard.com";
*/
const char* mqtt_server = "182.163.112.207";

WiFiClient espClient;
PubSubClient client(espClient);



//---------------------------------------------setup-------------------//


void setup() {
  // put your setup code here, to run once:
  

Serial.begin(115200);
secondTick.attach(1,ISRwatchdog);

WiFiManager wifiManager;
//wifiManager.resetSettings();
wifiManager.autoConnect("Smart Home", "admin1234");
Serial.println("Connected.");

pinMode(pirPin1,INPUT);
pinMode(pirPin2,INPUT);
pinMode(sonarPin,INPUT);
//setup_wifi();
client.setServer(mqtt_server, 1883);
client.setCallback(callback);
}


//-------------------------------------------loop-----------------------------------------//

void loop() 
{

  watchdogCount=0;

 if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
 //---------------------Updating device status---------------------------------------------//

    if(Version==1)
    {
      Serial.println("Firmware 18.0");
      Version++;
    }
    
    
  pirValue1=digitalRead(pirPin1);
  pirValue2=digitalRead(pirPin2);
  sonarValue=digitalRead(sonarPin);
  delay(100);
  Serial.print("pirValue1:");
  Serial.println(pirValue1);
  Serial.print("pirValue2:");
  Serial.println(pirValue2);
  Serial.print("sonarValue:");
  Serial.println(sonarValue);
  
      
  if((pirValue1== HIGH || pirValue2== HIGH || sonarValue== HIGH)&& flag==true)
  {
        
        client.publish("shs247/relay/0/set","1");
        Serial.print("Published data to turn on light");
        flag=false;
        Serial.println("Light on");
    
  } 
    
  
  if((pirValue1==LOW && pirValue2==LOW && sonarValue==LOW)&& flag==false)

  {

         client.publish("shs247/relay/0/set","0");
         Serial.print("Published data to turn off light");
         flag=true;
         Serial.println("light off");
        
           
        
    }
        }
  
//-------------------------------------reconnect()---------------------------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any


//---------------------------------------Subscribing to required topics-----------------------//

     
      client.subscribe("apartment/reset");
      Serial.println("Subsribed to topic: apartment/reset");
      
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()



//---------------------------Callback funtion-------------------------------------//

void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  

//----------------------Restarting the board from Engineer's end----------------------------//



  if(strcmp(topic, "apartment/reset") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data3=payload[i];
    
  
    if (data3=='1')
    {
      
      Serial.println("Resetting Device.........");
       ESP.restart();
      }}}
}
